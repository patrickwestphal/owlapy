from owlapy.model import IRI


class NodeID(object):
    _counter = 1
    _node_id_prefix = 'genid'
    _shared_node_id_prefix = 'genid-nodeid-'
    _prefix = '_:'
    _prefix_node = _prefix + _node_id_prefix
    _prefix_shared_node = _prefix + _shared_node_id_prefix

    def __init__(self, id_str):
        if id_str.startswith(self._prefix):
            self.id = id_str
        else:
            self.id = self._prefix + id_str

    def __eq__(self, other):
        if other is None:
            return False

        if id(other) == id(self):
            return True

        if not isinstance(other, NodeID):
            return False

        return self.id == other.id

    def __str__(self):
        return self.id

    def __repr__(self):
        return str(self)

    def __hash__(self):
        return hash(self.id)

    @classmethod
    def node_string(cls, node_id):
        """
        :param node_id: the node id (int)
        :return: string version of node_id
        """
        return cls._prefix_node + str(node_id)

    @classmethod
    def get_iri_from_node_id(cls, node_id_str):
        """Returns an absolute IRI from a given node_id string.

        :param node_id_str: the node id string
        :return: absolute IRI
        """
        return cls._prefix_shared_node + \
            node_id_str.replace(cls._node_id_prefix, '')

    @classmethod
    def next_anonymous_iri(cls):
        next_id = cls._counter
        cls._counter += 1
        return cls._prefix_node + str(next_id)

    @classmethod
    def is_anonymous_node_iri(cls, iri_or_iri_str):
        """Tests whether supplied IRI was generated by this parser in order to
        label an anonymous node.

        :param iri_or_iri_str: the input IRI or IRI string
        :return: True if the IRI was generated by this parser to label an
            anonymous node
        """
        if isinstance(iri_or_iri_str, IRI):
            iri = iri_or_iri_str
            return iri is not None and iri.namespace is not None and \
                iri.namespace.startswith(cls._prefix) and \
                cls._node_id_prefix in iri.namespace
        else:
            iri_str = iri_or_iri_str
            return iri_str is not None and \
                iri_str.startswith(cls._prefix) and \
                cls._node_id_prefix in iri_str

    @classmethod
    def is_anonymous_node_id(cls, iri_str):
        """
        :param iri_str: the IRI string or node id
        :return: True if the IRI is an anonymous label
        """
        return iri_str is not None and cls._prefix_shared_node in iri_str

    @classmethod
    def get_node_id(cls, id_str):
        """Gets a NodeID with a specific identifier string

        :param id_str: The string that identifies the node. If the string
            doesn't start with "_:" then this will be concatenated to the front
            of the specified id string; if the string is empty or null, an
            autogenerated id will be used.
        :return: A NodeID object
        """
        if not id_str:
            next_id = cls._counter
            cls._counter += 1

            id_str = cls._prefix_node + str(next_id)

        return NodeID(id_str)

    def compare_to(self, other):
        """Reimplementing the String.compareTo method [0] here since it is not
        provided in Python.

        [0] http://hg.openjdk.java.net/jdk7u/jdk7u6/jdk/file/8c2c5d63a17e/src/share/classes/java/lang/String.java

        :param other: a owlapy.model.NodeID object
        """
        len_self = len(self.id)
        len_othr = len(other.id)
        lim = min(len_self, len_othr)

        for i in range(lim):
            char_id_self = self.id[i]
            char_id_othr = other.id[i]

            if not char_id_self == char_id_othr:
                return ord(char_id_self) - ord(char_id_othr)

        return len_self - len_othr